substring problems are very common ..
 
- Pass by reference almost all..sometimes u may face err if negelct this
-Always first identify the pattern.. what datatype or algorithm i need to use to get the output
-Anayze the output and input test case relation..see + - * /..anything
eg -Leet 1539. Kth Missing Positive Number..here Input: arr = [2,3,4,7,11], k = 5 Output: 9..see..without getting required needed algo  too..you see that 

when 2<=5 ..5++ k=6
     3<=6..6++  k=7   
     4<=7 ..7++ k=8 
     7 <=8.......k=9..like this observe pattern in easy and med questions.all

--------------
-Sometimes dont use 2 loops to compare 2 arrays vectors
maintain a indexVar and increment as per need..and use that indexVar to access array2 element arr2[indVar] 


----------------
in some questions you just need to check back and front s[i+1] i-1...
you may need to iterate overrequired indec only ..like even....eg2914

        for (int i = 0; i < s.length(); i += 2) { //chk pairs...
            // If characters in current pair don't match,
            // we need one change to make them equal
            if (s[i] != s[i + 1]) {
                minChangesRequired++;
            }
        }
==================
If want to operate on string /number that needs to be operatied from back / need to remove characters /int from back
use for(back loop i--)  eg 1903 leeet
class Solution {
public:
    string largestOddNumber(string snum) {
        for (int i = snum.length() - 1; i >= 0; i--) {
            if ((snum[i]-'0') % 2 == 1) {
                return snum.substr(0, i + 1);
            }
        }
        return "";
    }
};
==========================
Compare 2 map counts or valuse with same keys
        for (auto& entry : mppS) {
            if (mppT[entry.first] !=entry.second) { // that is chk cnt of entry in mppT != mppS count
                // it may seem .first .second..but both point to counts ..
                // mppT[entry.first] =mppT count value
                return false;
            }
        }

================================
To check element presence use set
first store the vector elementes to set and use find to check presence
unordered_sett<int> uset(vec.begin(),vec.end());

uset.find(i / elem)

=============================
When more than one numbers in test cases..or when 2 arrays given for operation..try using SETS
========================
when want to perform ranking..positions ..shifting..where index is required to finf..find index using i ,n , % nums[i]..these four..find relation and then apply

========================
For some questions like 1422 2270..Logic is same..that is ..dont calculate full sum of array...where left and rightsum requried
calculate totalsum in O(N) for loop..i=0 to size()
then in 1 loop O(N) ..cacluate leftsum till from i=0 to size()-1..not end size()..as we dont calc for lastest..its auto calc
then rightsum = totalsum - leftsum


==========================
when you may think you are correct and require no changes...and 
sign of no output..that is empty output...see if u have passed through reference "&"


=========================
traverse array left to right
set l=0;r=n-1
for(i=left -> right)

same for 2d array
if r->l
see row and col indices..if row = even...traverse l->r
                       ..if row = odd....traverse r->l
using for loop..
=========================
